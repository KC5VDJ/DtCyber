  
  
  
    CCCCC    AAAAA   LL            66666    00000    00000    00000 
   CC   CC  AA   AA  LL           66   66  00   00  00   00  00   00
   CC       AA   AA  LL           66       00   00  00   00  00   00
   CC       AAAAAAA  LL           666666   00   00  00   00  00   00
   CC       AA   AA  LL           66   66  00   00  00   00  00   00
   CC   CC  AA   AA  LL           66   66  00   00  00   00  00   00
    CCCCC   AA   AA  LLLLLLL       66666    00000    00000    00000 
  
  
           SSSSS   N    NN   OOOOO   BBBBBB    OOOOO   LL 
          SS   SS  NN   NN  OO   OO  BB   BB  OO   OO  LL 
          SS       NNN  NN  OO  OOO  BB   BB  OO  OOO  LL 
           SSSSS   NN N NN  OO O OO  BBBBBB   OO O OO  LL 
               SS  NN  NNN  OOO  OO  BB   BB  OOO  OO  LL 
          SS   SS  NN   NN  OO   OO  BB   BB  OO   OO  LL 
           SSSSS   NN    N   OOOOO   BBBBBB    OOOOO   LLLLLLL
  
  
  
  
  
                    AT THE UNIVERSITY OF MINNESOTA
  
  
  
                         SNOINFO  EDITION  3.3
  
  
  
  
                                 ANDREW B. MICKEL 
                                 JOHN P. STRAIT 
                                      UNIVERSITY COMPUTER CENTER
                                      227 EXPERIMENTAL ENGINEERING
  
                                 JOHN T. EASTON 
  
  
                                 UNIVERSITY OF MINNESOTA
                                 MINNEAPOLIS, MINNESOTA 
                                 55455
  
                                 MARCH, 1975
  
  
  
 CAL 6000  SNOBOL  IS  AVAILABLE  UNDER  BOTH  BATCH  AND  TIMESHARING
 PROCESSING.    THIS  DOCUMENT  DESCRIBES  CAL  SNOBOL WITH RESPECT TO
 STANDARD SNOBOL4 AND ALSO DETAILS THE UNIVERSITY OF MINNESOTA VERSION
 OF CAL SNOBOL. 
 
 
 INTRODUCTION 
 ------------ 
      THIS  DOCUMENT  CONTAINS  INFORMATION  ON  THE   UNIVERSITY   OF
 MINNESOTA  VERSION  OF THE CAL 6000 SNOBOL INTERPRETER WRITTEN AT THE
 UNIVERSITY OF CALIFORNIA, BERKELEY.  ALSO DISCUSSED  ARE  TIMESHARING
 SNOBOL  FACILITIES  AT  THE UNIVERSITY OF MINNESOTA.  PLEASE REFER TO
 THE  DOCUMENT  "SNOBOL4  AT  THE  UNIVERSITY  OF  MINNESOTA"  FOR   A
 DESCRIPTION  OF  ALL  SNOBOL  FACILITIES  AVAILABLE  AND FOR SPECIFIC
 INFORMATION PERTAINING TO RUNNING  PROGRAMS  IN  A  BATCH  PROCESSING
 ENVIRONMENT.    ALSO  INCLUDED THERE IS A COMPLETE LIST OF REFERENCES
 AND A BRIEF DESCRIPTION OF THE SNOBOL4 LANGUAGE.      COPIES  OF  THE
 DOCUMENT  ABOVE  AS WELL AS THIS CAL SNOBOL DESCRIPTION ARE AVAILABLE
 FROM THE UCC REFERENCE LIBRARIAN.
  
      CAL SNOBOL IS MORE OR LESS  A  SUBSET  OF  STANDARD  SNOBOL4  AS
 DEFINED IN THE BOOK: 
       "THE SNOBOL4 PROGRAMMING LANGUAGE", BY GRISWOLD, POAGE, AND
             POLONSKY, PRENTICE HALL, 1971 (SECOND EDITION) 
       (A GOOD BOOK FOR BEGINNING SNOBOLERS IS:  "A SNOBOL4 PRIMER",
             GRISWOLD AND GRISWOLD, PRENTICE HALL, 1973)
  
      THE FIRST BOOK IS AN EXCELLENT  REFERENCE  AND  TUTORIAL  MANUAL
 DESCRIBING  THE  MACRO  IMPLEMENTATION  OF  SNOBOL4  FOR  THE IBM 360
 COMPUTER.  CAL SNOBOL IS NOT A MACRO IMPLEMENTATION,  BUT  INSTEAD  A
 VERSION  TAILORED  FOR  EFFICIENCY  ON  THE  CDC 6000/CYBER 70 SERIES
 MACHINES.  IT CONSISTS OF  A  TRANSLATOR  TO  CONVERT  SNOBOL  SOURCE
 STATEMENTS INTO AN INTERNAL MICRO CODE, AND AN INTERPRETER TO EXECUTE
 THE MICRO CODE.  CAL SNOBOL WAS DEVELOPED  BEGINNING  IN  1968-69  AT
 BERKELEY AND HAS BEEN SUBSEQUENTLY MAINTAINED AND MODIFIED THERE. THE
 U OF M VERSION HAS BEEN EXTENDED  FOR  THE  TIMESHARING  ENVIRONMENT,
 ALLOWING  LINE  NUMBERS  ON  PROGRAM  FILES  AND ENABLING INTERACTIVE
 INPUT/OUTPUT, AND HAS BEEN MODIFIED  FOR  THE  KRONOS  2.1  OPERATING
 SYSTEM.  THE  SECTION "U OF M MODIFICATIONS TO CAL SNOBOL" CONTAINS A
 SUMMARY OF CHANGES.
  
      FOLLOWING THIS INTRODUCTION  IS  A  DESCRIPTION  OF  TIMESHARING
 INFORMATION FOR RUNNING CAL SNOBOL PROGRAMS, AND A SECTION ON RUNNING
 PROGRAMS UNDER THE BATCH  SUBSYSTEM.    FURTHER  SECTIONS  DESCRIBING
 DIFFERENCES  IN  CAL SNOBOL OVER STANDARD SNOBOL ARE: CHARACTER SETS,
 DATATYPES, OPERATORS, ARITHMETIC, PRIMITIVE  FUNCTIONS,  INPUT/OUTPUT
 FUNCTIONS,    AND  KEYWORDS.    ALSO  INCLUDED  ARE  LISTS  OF U OF M
 MODIFICATIONS  TO  CAL  SNOBOL,  KNOWN  BUGS,  AND  SNOBOL  SIMULATED
 FUNCTIONS.  AN INDEX IS PROVIDED AT THE END OF THIS DOCUMENT.
  
      CAL SNOBOL HAS BEEN  AVAILABLE  UNDER  THE  MERITSS  TIMESHARING
 SYSTEM ON THE CDC 6400 AT THE UNIVERSITY OF MINNESOTA SINCE 1972.  IN
 OCTOBER, 1974 CAL SNOBOL'S TIMESHARING CAPABILITIES ON THE  CYBER  74
 MACHINE  AT  THE  UNIVERSITY  COMPUTER CENTER WERE UTILIZED UNDER THE
 MIRJE SYSTEM.  CAL SNOBOL IS FULLY SUPPORTED BY UCC. 
  
  
 TIMESHARING INFORMATION
 -----------------------
  
 THE TIMESHARING USER HAS THE CHOICE OF RUNNING  CAL  SNOBOL  PROGRAMS
 UNDER  THE  "SNOBOL SUBSYSTEM" OR THE "BATCH SUBSYSTEM" SUPERVISED BY
 TELEX - THE NAME OF THAT PART OF THE KRONOS OPERATING SYSTEM HANDLING
 TIMESHARING  JOBS.    TIMESHARING  JOBS ARE THEREFORE KNOWN AS "TELEX
 ORIGIN" OR "RUN UNDER TELEX".  CAL SNOBOL MAY  ALTERNATIVELY  BE  RUN
 (USUALLY WITH PUNCHED CARDS) FROM REMOTE BATCH TERMINALS.  THESE JOBS
 ARE CONSIDERED "BATCH ORIGIN" TO KRONOS.  THE DIFFERENCES FOR  SNOBOL
 USERS  BETWEEN  THE TWO TYPES ARE THE KIND OF PRINTED OUTPUT (PRINTER
 WIDTH) THAT IS RECEIVED, AND  THE  CHARACTER  SET  USED  (TIMESHARING
 TERMINAL AS OPPOSED TO LINE PRINTER CHARACTERS).  THE MAXIMUM LINE
 LENGTH FROM A TIMESHARING  TERMINAL  IS  150  CHARACTERS,  WHILE  THE
 SNOBOL  INTERPRETER  WILL ACCEPT ANY LENGTH (BUT IF THERE ARE NO LINE
 NUMBERS ON THE FILE, CAL SNOBOL WILL  RECOGNIZE  ONLY  THE  FIRST  72
 CHARACTERS).
  
 EXPLANATIONS OF COMPILE TIME ERRORS INCLUDE THE LINE  NUMBER  OF  THE
 OFFENDING  STATEMENT, AND A BRIEF DIAGNOSTIC OF ONE OR MORE ERRORS ON
 THAT LINE. EXPLANATIONS OF EXECUTION TIME ERRORS APPEAR AS FOLLOWS:
  
 -ERROR TERMINATION 
  IN STATEMENT N
  AT LEVEL M
  
  < EXECUTION ERROR MESSAGE > 
  
 STATEMENT N IS NOT THE LINE NUMBER, BUT THE SNOBOL STATEMENT AT WHICH
 THE  ERROR  WAS  DETECTED  (COUNT STATEMENTS BEGINNING WITH THE FIRST
 STATEMENT, NOT INCLUDING COMMENTS AND CONTINUATIONS.) LEVEL M IS  THE
 FUNCTION  LEVEL  AT  WHICH  THE  ERROR OCCURRED.  THE MAIN PROGRAM IS
 LEVEL 0. THE EXECUTION ERROR MESSAGE  DESCRIBES  THE  TYPE  OF  FATAL
 ERROR. 
  
 THE COMMANDS BELOW ACCESS SNOBOL IN THE BATCH SUBSYSTEM: 

      BATCH,40000.      (FOR A FIELD LENGTH OF 40000) 
      SNOBOL,PARAMETERS. 
  
 FOR EXAMPLE:   BATCH,40000.
                SNOBOL,I=SNOFLAK,L=LIST. 
  
 VALID PARAMETERS FOR THE SNOBOL  CONTROL CARD  ARE  DESCRIBED  BELOW;
         ALL ARE ORDER INDEPENDENT. 
  
     I - SPECIFIES THE FILE  ON  WHICH  THE  SOURCE  PROGRAM  RESIDES;
         DEFAULT IS "I=INPUT".
  
     L - SPECIFIES ONTO WHAT FILE THE LISTING OF THE SOURCE PROGRAM IS
         TO GO;  DEFAULT IS "L=OUTPUT".  "L=0" SUPPRESSES THE LISTING.
  
     D - SPECIFIES THE FILE TO WHICH THE INITIAL INPUT ASSOCIATION  IS
         MADE.  "D=INPUT" IS THE DEFAULT.  IF "D=DATAFIL" IS SELECTED,
         INPUT('INPUT','DATAFIL',80) IS PREDEFINED. 
  
     O - SPECIFIES THE FILE TO WHICH THE INITIAL OUTPUT ASSOCIATION IS
         MADE. "O=OUTPUT" IS THE DEFAULT. IF "O=RESULTS" IS SELECTED, 
         OUTPUT('OUTPUT','RESULTS',' ') IS PREDEFINED.
  
     B - SELECTS THE BUFFER SIZE TO BE USED FOR ALL I/O  FILES  DURING
         EXECUTION.    DEFAULT IS "B=401" (OCTAL).  MINIMUM IS "B=101"
         (OCTAL).  INCREASING THE BUFFER SIZE SPEEDS UP PROGRAMS DOING
         A SUBSTANTIAL AMOUNT OF INPUT/OUTPUT.
  
     F - SETS THE UPPER LIMIT ON FIELD LENGTH (MEMORY)  EXPANSION  FOR
         CAL  SNOBOL  DURING EXECUTION.  DEFAULT IS "F=33000" (OCTAL).
         THIS PARAMETER MAY BE USED FOR A FIELD LENGTH > 33000 .
  
     C - DETERMINES  WHICH  CHARACTER  SET  IS  TO  BE  USED.    "C=T"
         SPECIFIES  THE  TIMESHARING TERMINAL CHARACTER SET, AND "C=B"
         SPECIFIES THE  BATCH  (LINE  PRINTER)  CHARACTER  SET.    THE
         DEFAULT  IS DETERMINED BY THE JOB ORIGIN:  T FOR TELEX; B FOR
         BATCH. 
  
     P - DETERMINES THE PAGE LISTING FORMAT.  "P=T" SPECIFIES TELETYPE
         PAGING  -  NO  PAGE  EJECTS AND ONE OCCURRENCE OF A 72 COLUMN
         HEADER.  "P=B" SPECIFIES BATCH PAGING -  NORMAL  FORMAT.  THE
         DEFAULT IS DETERMINED BY JOB ORIGIN: T FOR TIMESHARING; B FOR
         BATCH. 
  
     H - SETTING "H=1" ALLOWS HEAP BLOCK  COMPACTION.    DEFAULT    IS
         "H=0".  SEE THE SECTION ON "KNOWN BUGS". 
  
   NOTE: THE D, O, C,  AND P CONTROL CARD PARAMETERS ARE UNIQUE TO THE
         U OF M VERSION OF CAL SNOBOL.
  
 THE KRONOS  RFL  CONTROL  CARD  AND  THE  SNOBOL   CONTROL  CARD    F
 PARAMETER  CONTROL  THE  MAXIMUM  FIELD  LENGTH PARAMETER FOR THE CAL
 SNOBOL RUN.  THE MAXIMUM OF THE  F  PARAMETER AND THE  INITIAL  FIELD
 LENGTH IS USED.
  
 TELEX ESTIMATES AND SETS FIELD LENGTH FOR A RUN SOLELY ON  THE  BASIS
 OF  THE  NUMBER OF CHARACTERS IN A FILE.  WHILE A GENEROUS AVERAGE IS
 ESTIMATED BY TELEX, THE SIZE OF A PROGRAM AND THE FIELD  LENGTH  THAT
 IT REQUIRES VARY WIDELY WITH CAL SNOBOL. 
  
 WHEN EXECUTED, THE SNOBOL PROGRAM WILL BE  LISTED  (UNLESS  "L=0"  IS
 SPECIFIED),  AND  LISTING  DIRECTIVES INSERTED INTO THE SOURCE BECOME
 USEFUL.  THE LISTING DIRECTIVES AVAILABLE IN CAL SNOBOL ARE  -UNLIST,
 -LIST,  -SPACE,  AND -EJECT.  -EJECT DOES NOT AFFECT TELETYPE PAGING.
 ANY OTHER LINE STARTING WITH A DASH IS CONSIDERED TO BE A COMMENT. 
  
 -UNLIST   TURNS THE LISTING OFF AT THE POINT IT APPEARS. 
 -LIST     TURNS ON THE LISTING AFTER THE LINE ON WHICH IT APPEARS. 
 -SPACE    CAUSES A BLANK LINE IN THE LISTING WHERE IT OCCURS.
 -EJECT    CAUSES A PAGE EJECT ("1") IN THE LISTING WHERE IT OCCURS.
  
 CAL SNOBOL ASSUMES THAT THE SOURCE FILE HAS LEADING LINE  NUMBERS  IF
 ITS  FIRST CHARACTER IS A DIGIT, AND WILL ACCEPT LINES OF ANY LENGTH.
 OTHERWISE, IF THERE ARE NO LINE  NUMBERS  ON  THE  SOURCE  FILE,  CAL
 SNOBOL  IGNORES  COLUMNS  73-80,  EVEN  IF  NON-BLANK, MOVING THEM 10
 SPACES OVER TO THE RIGHT ON THE LISTING, AND COMPLETELY  IGNORES  ANY
 CHARACTERS BEYOND COLUMN 80. 
  
  
 CHARACTER SETS 
 -------------- 
 TWO CHARACTER SETS ARE AVAILABLE WHEN USING CAL SNOBOL AT THE U OF M.
 BECAUSE THE TIMESHARING TERMINAL KEYBOARD IS SIMILAR TO THE CHARACTER
 SET DESCRIBED FOR STANDARD SNOBOL4, THIS SET IS DEFAULT.   THERE  ARE
 SOME  DIFFERENCES,  THE  ONLY  ONE  AFFECTING  CAL  SNOBOL  BEING THE
 CHARACTER FOR ALTERNATION IN PATTERNS; THIS IS AN UP  ARROW  (  ^  ). 
 (THIS SET MAY BE SPECIFIED BY "C=T" ON THE SNOBOLC CONTROL CARD).
  
 THE OTHER CHARACTER SET CORRESPONDS TO THE CDC 6000/CYBER  70  SERIES
 LINE  PRINTER  CHARACTER  EQUIVALENTS ON TIMESHARING TERMINALS.  THIS
 SET IS SELECTED BY SPECIFYING AN "X" ON THE RUN OR RNH COMMAND IN THE
 SNOBOL  SUBSYSTEM,  OR "C=B" ON THE SNOBOLC CONTROL CARD IN THE BATCH
 SUBSYSTEM. 
  
  
  
                 CHARACTER SET TABLE
                 -------------------
  
  
 STANDARD     TTY DEFAULT  LINE PRINTER 
 SNOBOL4      CHARACTERS   EQUIVALENTS ON TTYS
 -------      ----------   -------------------
  
 A-Z             A-Z        A-Z 
 0-9             0-9        0-9 
 PERIOD          .          . 
 COMMA           ,          , 
 COLON           %          % 
 SEMICOLON       ;          ; 
 PLUS            +          + 
 MINUS           -          - 
 TIMES           *          * 
 DIVIDE          /          / 
 QUOTE           "          ' 
 SINGLE QUOTE    '          ^
 OPEN PAREN      (          ( 
 CLOSE PAREN     )          ) 
 LESS THAN       < OR [     [ OR <     ARRAY
 GREATER THAN    > OR ]     ] OR >     BRACKETS 
 EQUAL SIGN      =          = 
 VERTICAL BAR    ^          //         ALTERNATION OPERATOR
 DOLLAR SIGN     $          $ 
 AMPERSAND       &          LINE FEED  SEE NOTE BELOW 
 AT SIGN         #          #          SEE NOTE BELOW 
 LOGICAL NOT     NONE       NONE       SEE NOTE BELOW 
 QUESTION MARK   ?          &          SEE NOTE BELOW 
 EXCLAMATION     NONE       "          SEE NOTE BELOW 
 PERCENT         NONE       ?          SEE NOTE BELOW 
 NUMBER SIGN     NONE       NONE       SEE NOTE BELOW 
  
 NOTE:  THESE LAST 7 CHARACTERS ARE INVALID OPERATORS IN CAL SNOBOL.
  
  
 DATATYPES
 ---------
 STRINGS,  NAMES,  REALS,  INTEGERS,  ARRAYS,  PATTERNS,   CODE,   AND
         PROGRAMMER-DEFINED  ARE  THE  DATATYPES IN CAL SNOBOL; TABLES
         ARE NOT IMPLEMENTED. 
  
 THE PRIMITIVE PATTERN STRUCTURE  SUCCEED  IS NOT PREDEFINED. 
  
  
 OPERATORS
 ---------
 OF THE UNARY OPERATORS,  CURSOR POSITION, INTERROGATION, AND NEGATION
         ARE   NOT   IMPLEMENTED.   DEFERRED  EVALUATION  (UNEVALUATED
         EXPRESSIONS USING THE UNARY *  )    MAY  ONLY  BE  USED  WITH
         VARIABLES, NOT FULL EXPRESSIONS OR FUNCTION CALLS. 
 OF  THE  BINARY  OPERATORS,  EXPONENTIATION  IS  NOT  AVAILABLE.  THE
         FUNCTION    OPSYM    (USED  FOR  CREATING SYNONYM SYMBOLS FOR
         EXISTING OPERATORS OR FUNCTIONS) IS NOT AVAILABLE. 
 PATTERN MATCHING IS PERFORMED IN QUICKSCAN MODE ONLY.  FULLSCAN  MODE
         IS  NOT  AVAILABLE.  ALL OTHER STANDARD SNOBOL4 OPERATORS ARE
         VALID. 
  
  
 ARITHMETIC 
 ---------- 
      1) THE MAXIMUM MAGNITUDE FOR AN INTEGER IS 10 DIGITS. 
      2) REAL NUMBERS EXIST IN THE RANGE 10**-294 TO 10**332  WITH  14
         SIGNIFICANT DIGITS.
      3) EXPONENTIATION OF INTEGERS OR REALS DOES NOT WORK. 
      4) ARITHMETIC EXPRESSIONS MIXING REAL AND  INTEGER  OPERANDS  IS
         ALLOWED  ONLY BY USING THE FUNCTION  CONVERT  EXPLICITLY. SEE
         "PRIMITIVE FUNCTIONS", BELOW.
      5) THE FUNCTIONS   REMDR  (YIELDING THE REMAINDER UPON DIVISION)
         AND   INTEGER  (A PREDICATE TEST FOR AN INTEGER ARGUMENT) ARE
         NOT IMPLEMENTED. 
  
  
  
 PRIMITIVE FUNCTIONS
 -------------------
 THE STANDARD SNOBOL4 FUNCTIONS   ARG,  CLEAR,  COLLECT,  COPY,  DUMP,
         DUPL,  EVAL,  FIELD,  INTEGER,  LOAD,  LOCAL,  OPSYN,  REMDR,
         REPLACE, STOPTR, TABLE, TRACE,  UNLOAD,  AND  VALUE  ARE  NOT
         IMPLEMENTED. 
  
 THE FOLLOWING FUNCTIONS ARE UNIQUE TO CAL SNOBOL (#1), HAVE DIFFERENT
 CALLS  (#2), DIFFERENT DEFINITIONS OVER STANDARD SNOBOL4 (#3), OR ARE
 U OF M ADDITIONS TO CAL SNOBOL (#4). 
  
 APPLY(F,X1,X2,...,XN) - APPLY ASSUMES THAT EXTRA ARGUMENTS ARE THROWN
         AWAY; THOSE MISSING ARE ASSUMED TO BE NULL (#2). 
  
 ARRAY(STRING) - ARRAY TAKES ONLY ONE ARGUMENT -- AN ARRAY  PROTOTYPE.
         ALL ELEMENTS ARE INITIALIZED TO THE NULL STRING (#2).
  
 CCIMAGE() - CCIMAGE RETURNS A  STRING  WHOSE  VALUE  IS  THE  CURRENT
         CONTROL  CARD  IMAGE; THIS IS EITHER THE SNOBOLC CONTROL CARD
         WITH ALL PARAMETERS AND ANY  COMMENTS  AFTER  THE  TERMINATOR
         CHARACTER,  OR  THE  COMPLETE  LOADER  CARD  IF LOADING A CAL
         SNOBOL FREEZE FILE.  THERE MAY OR MAY NOT BE TRAILING  BLANKS
         (#4).
  
 CLOCK() - CLOCK RETURNS A STRING WHICH IS THE TIME OF DAY IN THE FORM
         "HH:MM:SS" .  ANY ARGUMENTS ARE IGNORED (#1).
  
 CONVERT(X) - CONVERT IS ONLY USED FOR NUMERIC DATATYPE CONVERSION. IF
         X  IS REAL, A STRING IS RETURNED; IF X IS INTEGER OR A STRING
         OF DIGITS, POSSIBLY CONTAINING A PERIOD AND/OR LEADING  SIGN,
         THE  CORRESPONDING  REAL  NUMBER IS RETURNED. CONVERT MUST BE
         USED IN ARITHMETIC EXPRESSIONS MIXING REALS AND INTEGERS  AND
         TO OUTPUT REAL NUMBERS (#3). 
  
 FREEZE(FNAME,RECNAM) - FREEZE WRITES OUT A COPY OF THE  ENTIRE  FIELD
         LENGTH  WHICH  INCLUDES  THE  CAL  SNOBOL INTERPRETER AND THE
         USER'S PROGRAM, IN THE FORMAT OF TWO ABSOLUTE OVERLAYS ON THE
         FILE  NAMED  BY THE ARGUMENT FNAME.  IF RECNAM IS PRESENT, IT
         IS USED AS THE IDENT NAME FOR THE FIRST RECORD OF THE BINARY;
         OTHERWISE  "ICE" IS USED.  "SNOBOL=" IS THE IDENT NAME OF THE
         SECOND RECORD. WHICH  CONTAINS  THE  RUN-TIME  ERROR  MESSAGE
         TEXTS.   AFTER WRITING THE OVERLAYS, EXECUTION IS TERMINATED.
         THE FILE CAN BE SAVED AND LATER EXECUTED BY LOADING THE  FILE
         IN  THE  BATCH SUBSYSTEM. EXECUTION IS RESUMED IN THE PROGRAM
         AT THE POINT WHERE FREEZE WAS CALLED. FOR EXAMPLE,    IF  THE
         STATEMENT
            FREEZE('CONCORD') 
         IS ENCOUNTERED IN A PROGRAM, A FILE CONCORD  IS  CREATED  AND
         SNOBOL WILL END EXECUTION. THE SYSTEM COMMAND: 
            SAVE,CONCORD
         WILL SAVE THIS COPY OF THE FILE. TO RUN THE PROGRAM WHERE  IT
         LEFT OFF, DO:
            OLD,CONCORD  (TIMESHARING)  OR  GET(CONCORD)  (BATCH) 
            X,CONCORD                       CONCORD.
  
         FREEZE IS USEFUL IF A LARGE PART OF THE  PROGRAM  INITIALIZES
         STRINGS AND PATTERNS BEFORE COMPUTATION  OF RESULTS (#1).
  
   NOTE: FREEZE HAS BEEN MODIFIED AT THE U OF M TO WRITE TWO OVERLAYS,
         WITH  STANDARD  TYPE  *OVL*  RECORD  NAMES, THUS ALLOWING THE
         BINARY TO BE EXECUTED AT ANY KRONOS INSTALLATION.
  
 IF(E1,E2,...,EN) - IF IS A PREDICATE FUNCTION (SIMILAR  TO  AN  "AND"
         FUNCTION)  ALLOWING  AN ARBITRARY NUMBER OF EXPRESSIONS TO BE
         GROUPED FOR EVALUATION IN ONE STATEMENT (#1).
  
 ITEM(A,S1,S2,...,SN) - A IS AN ARRAY.  IF THE OTHER ARGUMENTS ARE ALL
         INTEGERS  AND  A  IS N-DIMENSIONAL, THEN ITEM DOES AN NRETURN
         OF THE NAME OF THE ELEMENT OF  A  WHOSE  SUBSCRIPTS  ARE  THE
         SI.    THE   SI  CAN ALSO BE STRINGS OF INTEGERS SEPARATED BY
         COMMAS. ITEM SCANS THE  SI  UNTIL ENOUGH INTEGERS TO  SATISFY
         THE  DIMENSIONALITY  OF    A  HAVE BEEN FOUND - THE EXTRA ARE
         IGNORED; NULL STRINGS ARE  ASSUMED  FOR  MISSING  SUBSCRIPTS.
         ITEM FRETURNS IF ANY SUBSCRIPTS ARE OUT OF BOUNDS (#3) . 
  
 NEXTVAR(X) - IN CAL SNOBOL, IT IS  POSSIBLE  TO  SEQUENTIALLY  ACCESS
         "FAMILIES"  OF  VARIABLES.   EXAMPLES OF FAMILIES INCLUDE ALL
         ELEMENTS OF AN ARRAY, FIELDS  IN  A  PROGRAMMER-DEFINED  DATA
         STRUCTURE,  AND  MOST  IMPORTANT,  ALL  SIMPLE  VARIABLES  IN
         EXISTANCE DURING A PROGRAM RUN, BOTH NATURAL AND CREATED.
  
         NEXTVAR RETURNS THE NAME OF THE "NEXT" VARIABLE IN  THE  SAME
         FAMILY AS THE VARIABLE NAMED BY X.  X MUST BE OF TYPE NAME OR
         STRING. NEXTVAR WILL TREAT A FAMILY OF VARIABLES  CYCLICALLY.
         FOR  ARRAYS,  ELEMENTS  ARE  SELECTED  BY  THE ORDERED SET OF
         INTEGER SUBSCRIPTS (#1). 
  
 PROTOTYPE(X) - EXISTS IN  CAL  SNOBOL  AS  A  GENERALIZATION  OF  THE
         FUNCTIONS  ARG,  FIELD,  AND LOCAL IN STANDARD SNOBOL.  HENCE
         PROTOTYPE IS DESIGNED TO RETURN  THE  "PROTOTYPE"  DEFINITION
         FOR VARIABLES OF NEARLY ALL DATATYPES  (#1) .
  
      1) IF X IS AN ARRAY, PROTOTYPE RETURNS  A  STRING  OF  THE  FORM
         L1%U1,L2%U2,...,LN%UN  WHERE  LI%UI  ARE  THE LOWER AND UPPER
         BOUNDS OF THE ITH DIMENSION OF THE ARRAY.  THE LI AND UI  ARE
         INTEGERS WITH LEADING ZEROS AND PLUS SIGN SUPPRESSED.
  
      2) IF  X  IS  A  PROGRAMMER-DEFINED  DATA  STRUCTURE,  PROTOTYPE
         RETURNS  THE  <DATA  PROTOTYPE>  THAT  WAS  USED  IN THE DATA
         FUNCTION CALL WHEN X WAS DEFINED.
  
      3) IF X IS A PATTERN, PROTOTYPE RETURNS ONE OF A  FIXED  SET  OF
         PATTERN  "PROTOTYPES".    THESE  STRINGS  ARE  IN THE FORM OF
         PROTOTYPES  FOR  PROGRAMMER-DEFINED  DATA  STRUCTURES.     TO
         FURTHER  THE  ANALOGY BETWEEN PATTERNS AND PROGRAMMER-DEFINED
         DATA   STRUCTURES,   A   SET   OF   PSEUDO-FIELD   FUNCTIONS,
         CORRESPONDING  TO  THE FIELD NAMES IN THE PATTERN PROTOTYPES,
         HAVE BEEN IMPLEMENTED.  THESE PROCEDURES ALLOW A  PATTERN  TO
         BE DECOMPOSED INTO THE OBJECTS USED TO BUILD THE PATTERN.
  
           IF X IS ARB, REM, BAL, FAIL,  ABORT,  OR  FENCE,  PROTOTYPE
           RETURNS  THE STRING  ARB() , REM() , ... .  NO PSEUDO-FIELD
           FUNCTIONS EXIST FOR THESE PATTERNS.
  
           IF X IS A LEN, POS, RPOS, TAB,  RTAB,  ANY,  NOTANY,  SPAN,
           BREAK, OR ARBNO PATTERN, PROTOTYPE RETURNS THE STRING: 
             Y(PARAM) 
           WHERE Y IS EITHER LEN, POS, ETC.  THE PSEUDO-FIELD FUNCTION
           PARAM MAY THEN BE USED ON ANY OF THESE PATTERNS.  E.G.:
             PARAM(LEN('3'))  RETURNS THE INTEGER 3 . 
             PARAM(ANY('CBAC'))  RETURNS THE STRING ABC . 
             PARAM(ARBNO('CBAC'))  RETURNS THE STRING CBAC .
  
           IF X IS A CONCATENATED  OR  ALTERNATED  PATTERN,  PROTOTYPE
           RETURNS THE STRING  CAT(FIRST,REST) , OR  ALT(FIRST,REST) .
           THE PSEUDO FIELD FUNCTIONS FIRST AND REST  ARE  DEFINED  ON
           THE CLASS OF CONCATENATED AND ALTERNATED PATTERNS. E.G.: 
             FIRST('A' ^ 'B' ^ 'C') RETURNS THE STRING A .
             REST('A' ^ 'B' ^ 'C') RETURNS THE PATTERN  WHICH  IS  THE
               VALUE OF THE EXPRESSION ('B' ^ 'C') . 
             FOR EXAMPLE,  FIRST(BAL REM)  RETURNS THE PATTERN  BAL . 
  
           IF X IS A "NAMING" PATTERN,  E.G. P $ R OR P . R, PROTOTYPE
           RETURNS THE STRING  DOL(LEFT,RIGHT)  OR  PRD(LEFT,RIGHT)  .
           E.G.: THE PSEUDO FIELD FUNCTIONS 
             LEFT(P $ R)  RETURNS THE PATTERN  P , AND
             RIGHT(P $ R)  RETURNS THE VARIABLE NAME  R . 
  
           IF X IS A DEFERRED EVALUATION PATTERN, I.E.  *V,  PROTOTYPE
           RETURNS  THE  STRING    STAR(RIGHT)  .    THE  PSEUDO FIELD
           FUNCTION RIGHT(X) RETURNS THE VARIABLE NAME  V . 
  
      4) X CAN ALSO BE A NAME OF A VARIABLE.  SEE THE  EXPLANATION  OF
         FAMILIES  OF  VARIABLES  IN  THE  DEFINITION  OF THE FUNCTION
         NEXTVAR ABOVE. 
           IF X IS A SIMPLE VARIABLE,  PROTOTYPE  RETURNS  THE  STRING
           INDIRECT(RIGHT). THE PSEUDO FIELD FUNCTION RIGHT(X) RETURNS
           THE STRING CORRESPONDING TO THE SIMPLE VARIABLE NAMED BY X.
           E.G.:
             RIGHT(.VAR)  RETURNS THE STRING  VAR . 
  
      5) IF X  IS  AN  ARRAY  ELEMENT  OR  A  PROGRAMMER-DEFINED  DATA
         STRUCTURE     FIELD,    PROTOTYPE    RETURNS    THE    STRING
         ITEM(FAMILY,SELECTOR)  OR APPLY(SELECTOR,FAMILY) .  FAMILY(X)
         RETURNS THE ARRAY OR OBJECT WHICH CONTAINS THE VARIABLE NAMED
         BY X; SELECTOR RETURNS A STRING WHICH CAN BE USED  TO  SELECT
         THIS VARIABLE IN FAMILY(X).
           ITEM(FAMILY(.A[I,J]),SELECTOR(.A[I,J]))  IS  EQUIVALENT  TO
             A[I,J] . 
           APPLY(SELECTOR(.SON(NODE)),FAMILY(.SON(NODE)))           IS
             EQUIVALENT TO SON(NODE) .
  
 REMARK(STRING) - REMARK PLACES  STRING    IN  THE  DAYFILE.    REMARK
         RETURNS  THE  NULL STRING.  THE STRING MAY BE A MAXIMUM OF 80
         CHARACTERS LONG  (#2). 
  
 TYPE(X) - TYPE IS EQUIVALENT TO DATATYPE(X) EXCEPT FOR THE CASE  WHEN
         X    IS  A PROGRAMMER-DEFINED DATATYPE (DATA STRUCTURE). TYPE
         THEN RETURNS THE STRING "DATA" , WHEREAS DATATYPE RETURNS THE
         DATA STRUCTURE NAME STRING WHICH WAS DEFINED IN THE PROTOTYPE
         TO THE FUNCTION DATA (#1). 
  
  
 INPUT/OUTPUT FUNCTIONS 
 ---------------------- 
 THE FUNCTION BACKSPACE IS  NOT  AVAILABLE.    ENDRECORD  AND  ENDFILE
 REPLACE  ENDGROUP, AND EOR AND EOF REPLACE EORLEVEL, TO BE CONSISTENT
 WITH KRONOS FILE STRUCTURE. (ENDGROUP AND EORLEVEL  WERE  CAL  SNOBOL
 FUNCTIONS  DESIGNED  FOR  THE SCOPE OPERATING SYSTEM.)  THE NUMBERING
 CONVENTIONS OF THE PREVIOUS SECTION ARE AGAIN USED BELOW.
  
  
 DETACH(VNAME) - REMOVES THE I/O ASSOCIATION THAT THE STRING VNAME  (A
         VARIABLE) MIGHT HAVE (#2). 
  
  
 ENDRECORD(FNAME) - WRITES AN END OF RECORD ON THE FILE  SPECIFIED  BY
         THE VALUE OF FNAME (#4). 
  
  
 ENDFILE(FNAME) - WRITES AN END OF FILE ON THE FILE SPECIFIED  BY  THE
         VALUE OF FNAME (#2),(#4).
  
  
 EOR(FNAME) - SUCCEEDS  AND  RETURNS  THE  NULL  STRING  IF  THE  FILE
         IDENTIFIED  BY  THE VALUE OF FNAME IS POSITIONED AT AN END OF
         RECORD.  EOR FAILS OTHERWISE (#4). 
  
  
 EOF(FNAME) - SUCCEEDS  AND  RETURNS  THE  NULL  STRING  IF  THE  FILE
         IDENTIFIED  BY  THE VALUE OF FNAME IS POSITIONED AT AN END OF
         FILE.  EOF FAILS OTHERWISE (#4). 
  
  
 EOI(FNAME) - SUCCEEDS  AND  RETURNS  THE  NULL  STRING  IF  THE  FILE
         IDENTIFIED  BY  THE VALUE OF FNAME IS POSITIONED AT AN END OF
         INFORMATION.  EOI FAILS OTHERWISE (#1).
  
  
 INPUT(VNAME,FNAME,LENGTH) - INPUT ASSOCIATES THE VARIABLE REPRESENTED
         BY  THE  STRING  VNAME  TO THE FILE REPRESENTED BY THE STRING
         FNAME, SUCH THAT ANY TIME VNAME IS EVALUATED, THE  NEXT  LINE
         (UNIT  RECORD) IS READ FROM FILE FNAME.  LENGTH IS AN INTEGER
         (DEFAULT VALUE ZERO) SPECIFYING THE NUMBER OF  CHARACTERS  TO
         READ FROM EACH LINE ON THE FILE. TRAILING BLANKS ARE SUPPLIED
         TO LINES READ WHICH  ARE  SHORTER  THAN  LENGTH.    IF  VNAME
         ALREADY  HAS AN I/O ASSOCIATION, IT IS FIRST DETACHED.  INPUT
         RETURNS THE NULL STRING AS ITS VALUE.  THE TRIM FUNCTION  CAN
         BE USED SUBSEQUENTLY ON VNAME TO DELETE TRAILING BLANKS (#2).
  
  
 OUTPUT(VNAME,FNAME,PREFIX)   -   OUTPUT   ASSOCIATES   THE   VARIABLE
         REPRESENTED  BY  THE  STRING VNAME TO THE FILE REPRESENTED BY
         FNAME, SUCH THAT ANY NEW VALUE GIVEN TO VNAME CAUSES  A  LINE
         (UNIT  RECORD)  TO BE WRITTEN ON THE FILE. PREFIX IS A STRING
         OF LENGTH 0 OR 1 (NORMALLY USED AS A  LINE  PRINTER  CARRIAGE
         CONTROL)  WHICH IS CONCATENATED TO THE BEGINNING OF EACH LINE
         WRITTEN TO THE  FILE.    OUTPUT  DETACHES  ANY  PREVIOUS  I/O
         ASSOCIATION THAT VNAME HAS AND RETURNS THE NULL STRING.
  
         OUTPUT-ASSOCIATED VARIABLES ARE NOT  AUTOMATICALLY  FORMATTED
         INTO  MORE  THAN  ONE LINE.  TO WRITE STRINGS LONGER THAN THE
         PRINTER WIDTH, "BUFFER" THE RESULT.    E.G.:  IF  VARIABLE  X
         CONTAINS THE STRING TO BE WRITTEN TO FILE OUTPUT, THEN 
                     OUTLOOP   X LEN(N) . OUTPUT =     %S(OUTLOOP)
                               OUTPUT = DIFFER(X) X 
         PRINTS THE VALUE OF X ON ONE OR MORE LINES OF LENGTH N (#2). 
  
 REWIND(FNAME) - REWIND REPOSITIONS A FILE REPRESENTED BY  THE  STRING
         FNAME  TO ITS BEGINNING OF INFORMATION.  REWIND WRITES AN END
         OF RECORD ON AN OUTPUT TYPE FILE  (IF  IT  HAS  BEEN  WRITTEN
         UPON) BEFORE REWINDING.  REWIND RETURNS THE NULL STRING (#2).
  
 FURTHER NOTES: 
      1) FILE ASSOCIATIONS TO THE VARIABLE NAMES INPUT AND OUTPUT  ARE
         PREDEFINED.      THE  DEFAULTS ARE  INPUT('INPUT','INPUT',80)
         AND OUTPUT('OUTPUT','OUTPUT',' ').   PREDEFINED  ASSOCIATIONS
         FOR THE VARIABLE NAMES INPUT AND OUTPUT CAN BE MADE INITIALLY
         TO OTHER FILES BY USING THE D AND O PARAMETERS ON THE SNOBOLC
         CONTROL CARD.  (SEE THE DISCUSSION OF CONTROL CARD PARAMETERS
         IN THE SECTION  "TIMESHARING INFORMATION".)
  
      2) THE  FILE      "OUTPUT"      HAS  SPECIAL    MEANING    UNDER
         TIMESHARING.  INFORMATION WRITTEN TO IT IS PRINTED BEFORE THE
         NEXT INPUT REQUEST  IS  MADE,  THEREBY  ENABLING  INTERACTIVE
         INPUT/OUTPUT.   READING AN END OF RECORD (EOR) CAUSES FAILURE
         BUT SUBSEQUENT READS CAN BE MADE WITHOUT REDEFINING THE INPUT
         ASSOCIATION FOR THE INPUT FILE.
  
      3) THE VARIABLE "PUNCH" DOES NOT HAVE A  PREDEFINED  ASSOCIATION
         IN CAL SNOBOL. 
  
            OUTPUT('PUNCH','PUNCH') 
         MAKES THE STANDARD SNOBOL4 PUNCH ASSOCIATION.
            OUTPUT('NEWPAGE','OUTPUT',1)
         PROVIDES A MEANS OF PAGE EJECTING ON LINE PRINTER OUTPUT IF A
         SUBSEQUENT ASSIGNMENT IS MADE TO NEWPAGE.
  
  
 KEYWORDS 
 -------- 
 KEYWORDS ARE IMPLEMENTED AS PRIMITIVE FUNCTIONS IN  CAL  SNOBOL,  AND
 THEREFORE  THE  UNARY  &  OPERATOR  IS INVALID. THE KEYWORD FUNCTIONS
 AVAILABLE ARE DISCUSSED HERE.
  
 ALPHABET()    RETURNS  AS  ITS  VALUE  A  STRING  CONTAINING  THE  63
         CHARACTERS  OF  THE CDC 6000/CYBER 70 SERIES CHARACTER SET IN
         THEIR STANDARD COLLATING  SEQUENCE  (IN  NUMERICAL  ORDER  BY
         DISPLAY  CODE).  TWO OF THESE (DISPLAY CODES 74B AND 76B) ARE
         NORMALLY USED  AS  ASCII  ESCAPE  CHARACTERS  ON  TIMESHARING
         TERMINALS  AND  GIVE UNUSUAL OR UNDESIRABLE EFFECTS WHEN USED
         ALONE. 
  
 ANCHOR(X)   TURNS ON THE ANCHORED MODE OF PATTERN MATCHING  IF  X  IS
         ANY  NON-NULL  EXPRESSION; TURNS OFF ANCHORED MODE OTHERWISE.
         INITIALLY SNOBOL PATTERN MATCHING IS NOT  IN  ANCHORED  MODE.
         EXAMPLE:  ANCHOR(1) TURNS IT ON;  ANCHOR() TURNS IT OFF. 
  
 FNCLEVEL()   RETURNS  AN  INTEGER  CORRESPONDING  TO  THE  NUMBER  OF
         FUNCTIONS CALLED WHICH HAVE NOT YET RETURNED.
  
 MAXLNGTH(I) RETURNS THE VALUE CORRESPONDING TO THE MAXIMUM  ALLOWABLE
         LENGTH  STRING  IN  CAL  SNOBOL  IF  I  IS  NULL.  FOR  I  AN
         INTEGER, THIS MAXIMUM IS RESET TO THE VALUE   I  .  INITIALLY
         MAXLNGTH() HAS THE VALUE 131070 .
  
 STCOUNT() RETURNS THE RUNNING TOTAL OF THE NUMBER OF STATEMENTS WHICH
         HAVE BEEN EXECUTED SO FAR. 
  
 STLIMIT(I)  RETURNS THE VALUE CORRESPONDING TO THE MAXIMUM NUMBER  OF
         STATEMENTS  ALLOWED TO BE EXECUTED BEFORE EXECUTION IS HALTED
         IF I IS NULL; FOR  I  AN INTEGER, THIS VALUE IS RESET  TO  I.
         INITIALLY STLIMIT() HAS THE VALUE 1000000 .
  
 THERE ARE NO PROTECTED KEYWORDS IN CAL SNOBOL (E.G. &ERRTYPE). 
  
  
 UNIVERSITY OF MINNESOTA MODIFICATIONS TO CAL 6000 SNOBOL 
 -------------------------------------------------------- 
  
 ALL MODIFICATIONS ARE NOTED AS SUCH IN THE  SECTION  WHERE  THEY  ARE
 PRIMARILY  DESCRIBED.    USE THE INDEX AT THE END OF THIS DOCUMENT TO
 LOCATE A PARTICULAR SECTION. MODIFICATIONS ARE GAUGED HERE AS  UNIQUE
 TO  THE  U  OF  M VERSION (#1); EXTENDED AND ALTERED (NOT COMPATIBLE)
 (#2); AND EXTENDED (COMPATIBLE) (#3).
  
   1) LINE NUMBERS (#1) 
   2) INPUT AND OUTPUT ASSOCIATIONS (#2)
   3) INTERACTIVE INPUT/OUTPUT (#1) 
   4) TTY CHARACTER SET (#1)
   5) CCIMAGE FUNCTION (#1) 
   6) FREEZE FUNCTION (#3)
   7) ENDRECORD FUNCTION (#1) 
      (ENDRECORD REPLACES ENDGROUP FUNCTION)
   8) ENDFILE FUNCTION (#1) 
      (ENDFILE REPLACES ENDGROUP FUNCTION)
   9) EOR FUNCTION (#1) 
      (EOR REPLACES EORLEVEL FUNCTION)
  10) EOF FUNCTION (#1) 
      (EOF REPLACES EORLEVEL FUNCTION)
  11) CONTROL CARD PARAMETERS (#1)
  
  
 KNOWN BUGS 
 ---------- 
      1) GARBAGE COLLECTION  OCCURS  IN  TWO  PHASES,    LIST  STORAGE
         COMPACTION   AND   HEAP   BLOCK  COMPACTION.    LIST  STORAGE
         COMPACTION WORKS PROPERLY.  HOWEVER,  HEAP  BLOCK  COMPACTION
         STILL  CONTAINS  NUMEROUS  BUGS AND IS TURNED OFF (SEE NO. 4,
         BELOW). WHEN STRING SPACE FILLS  UP,  GARBAGE  COLLECTION  IS
         INVOKED. IF THERE IS NOT ENOUGH SPACE TO GARBAGE COLLECT, CAL
         SNOBOL WILL ERROR TERMINATE WITH THE MESSAGE   " THE  MAXIMUM
         FIELD  LENGTH  HAS  BEEN  EXCEEDED."  .  AN INCREASE IN FIELD
         LENGTH USUALLY FIXES THIS.  WHEN  RUNNING  A  PROGRAM,  EXTRA
         MEMORY (UP TO THE MAXIMUM ALLOWABLE) CAN BE ALLOTTED BY USING
         THE MI OR MA PARAMETER ON THE RUN COMMAND  UNDER  THE  SNOBOL
         SUBSYSTEM, OR BY RUNNING UNDER THE BATCH SUBSYSTEM, USING THE
         F  PARAMETER ON THE SNOBOLC CARD.
  
      2) EXPONENATATION OF REALS OR INTEGERS DOES NOT WORK. 
  
      3) DEFERRED EVALUATION (UNARY    *    OPERATOR  FOR  UNEVALUATED
         EXPRESSIONS)  APPLIED TO ANYTHING OTHER THAN A VARIABLE NAME,
         IS NOT DETECTED AS AN INAPPROPRIATE  CAL  SNOBOL  EXPRESSION.
         TO  PERFORM  DEFERRED  EVALUATION OF A FUNCTION, FOR EXAMPLE:
         *F(X), WHERE F DOES  NOT  RETURN  A  VARIABLE  NAME,  USE  AN
         NRETURN IN F.
  
      4) DOCUMENTATION FROM BERKELEY ACCOMPANYING THE PRESENT  VERSION
         OF  CAL  SNOBOL  STATES THAT HEAP BLOCK COMPACTION IS A MAJOR
         SOURCE OF  BUGS  (  "AND  MAY  ALWAYS  BE"  ).    HEAP  BLOCK
         COMPACTION  IS  THEREFORE  TURNED  OFF.  IT MAY BE ENABLED BY
         SPECIFYING H=1 ON THE SNOBOL CONTROL  CARD  UNDER  THE  BATCH
         SUBSYSTEM, AND CALLING THE PRIMITIVE FUNCTION HBC (HBC HAS NO
         ARGUMENTS) AT THE PLACE IN THE PROGRAM WHERE WHERE HEAP BLOCK
         COMPACTION  IS  DESIRED. THE MESSAGE  " HEAP BLOCK COMPACTION
         CALLED"  IS PRINTED IN THE DAYFILE EVERY TIME HBC IS  CALLED.
         HOWEVER,  USE  OF HEAP BLOCK COMPACTION IS NOT ADVISED EXCEPT
         FOR EXPERIMENTATION, AND RESULTS CANNOT BE GUARANTEED. 
  
      5) CONCATENATION IN THE SUBJECT  FIELD  OF  A  STATEMENT  (USING
         PARENTHESES) IS A COMPILE ERROR UNDER SOME CONDITIONS. 
  
      6) REDEFINING  STANDARD  PRIMITIVE  FUNCTIONS  CAUSES   ABNORMAL
         TERMINATION. 
  
      7) VALUES OF LITERALS CAN  BE  CHANGED  WHEN  THEY  SHOULD  NOT.
         EXAMPLE: 
            'HI THERE' 'HI' . 'XXX';  OUTPUT = 'XXX'
         WRITES THE LETTERS:
            HI
  
      8) EMBEDDED ALTERNATION SYMBOLS IN A NUMBER CAUSE AN ABORT. 
  
      9) DUPLICATE  LABELS  RESULTING  FROM  COMPILING  MORE  CODE  AT
         EXECUTION TIME ARE NOT HANDLED PROPERLY BY CAL SNOBOL. 

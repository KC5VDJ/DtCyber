/*
 *  translator.js
 *
 *  This module provides character set translation between
 *  ASCII and EBCDIC.
 */
class Translator {
  //
  // ASCII to BCD character code translation table
  //
  static AsciiToBcd = [
  /* 00-07 */  0x00,    0x01,    0x02,    0x03,    0x04,    0x05,    0x06,    0x07,
  /* 08-0f */  0x08,    0x09,    0x0a,    0x0b,    0x0c,    0x0d,    0x0e,    0x0f,
  /* 10-17 */  0x10,    0x11,    0x12,    0x13,    0x14,    0x15,    0x16,    0x17,
  /* 18-1f */  0x18,    0x19,    0x1a,    0x1b,    0x1c,    0x1d,    0x1e,    0x1f,
  /* 20-27 */  0x50,    0x2a,    0x4c,    0x5e,    0x2b,    0x4e,    0x5f,    0x2d,
  /* 28-2f */  0x5c,    0x3c,    0x2c,    0x30,    0x5b,    0x20,    0x3b,    0x51,
  /* 30-37 */  0x4a,    0x41,    0x42,    0x43,    0x44,    0x45,    0x46,    0x47,
  /* 38-3f */  0x48,    0x49,    0x40,    0x3f,    0x3a,    0x4b,    0x2f,    0x2e,
  /* 40-47 */  0x4d,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,    0x37,
  /* 48-4f */  0x38,    0x39,    0x21,    0x22,    0x23,    0x24,    0x25,    0x26,
  /* 50-57 */  0x27,    0x28,    0x29,    0x52,    0x53,    0x54,    0x55,    0x56,
  /* 58-5f */  0x57,    0x58,    0x59,    0x4f,    0x3d,    0x5a,    0x00,    0x5d,

  /* 60-67 */  0x00,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,    0x37,
  /* 68-6f */  0x38,    0x39,    0x21,    0x22,    0x23,    0x24,    0x25,    0x26,
  /* 70-77 */  0x27,    0x28,    0x29,    0x52,    0x53,    0x54,    0x55,    0x56,
  /* 78-7f */  0x57,    0x58,    0x59,    0x00,    0x00,    0x00,    0x00,    0x00
  ];
  //
  // BCD to ASCII character code translation table
  //
  static BcdToAscii = [
  /* 00-07 */  0x00,    0x01,    0x02,    0x03,    0x04,    0x05,    0x06,    0x07,
  /* 08-0f */  0x08,    0x09,    0x0a,    0x0b,    0x0c,    0x0d,    0x0e,    0x0f,
  /* 10-17 */  0x10,    0x11,    0x12,    0x13,    0x14,    0x15,    0x16,    0x17,
  /* 18-1f */  0x18,    0x19,    0x1a,    0x1b,    0x1c,    0x1d,    0x1e,    0x1f,
  /* 20-27 */  0x2d,    0x4a,    0x4b,    0x4c,    0x4d,    0x4e,    0x4f,    0x50,
  /* 28-2f */  0x51,    0x52,    0x21,    0x24,    0x2a,    0x27,    0x3f,    0x3e,
  /* 30-37 */  0x2b,    0x41,    0x42,    0x43,    0x44,    0x45,    0x46,    0x47,
  /* 38-3f */  0x48,    0x49,    0x3c,    0x2e,    0x29,    0x5c,    0x5e,    0x3b,
  /* 40-47 */  0x3a,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,    0x37,
  /* 48-4f */  0x38,    0x39,    0x30,    0x3d,    0x22,    0x40,    0x25,    0x5b,
  /* 50-57 */  0x20,    0x2f,    0x53,    0x54,    0x55,    0x56,    0x57,    0x58,
  /* 58-5f */  0x59,    0x5a,    0x5d,    0x2c,    0x28,    0x5f,    0x23,    0x26
  ];
  //
  // ASCII to EBCDIC character code translation table
  //
  static AsciiToEbcdic = [
  /* 00-07 */  0x00,    0x01,    0x02,    0x03,    0x37,    0x2d,    0x2e,    0x2f,
  /* 08-0f */  0x16,    0x05,    0x25,    0x0b,    0x0c,    0x0d,    0x0e,    0x0f,
  /* 10-17 */  0x10,    0x11,    0x12,    0x13,    0x3c,    0x3d,    0x32,    0x26,
  /* 18-1f */  0x18,    0x19,    0x3f,    0x27,    0x1c,    0x1d,    0x1e,    0x1f,
  /* 20-27 */  0x40,    0x5a,    0x7f,    0x7b,    0x5b,    0x6c,    0x50,    0x7d,
  /* 28-2f */  0x4d,    0x5d,    0x5c,    0x4e,    0x6b,    0x60,    0x4b,    0x61,
  /* 30-37 */  0xf0,    0xf1,    0xf2,    0xf3,    0xf4,    0xf5,    0xf6,    0xf7,
  /* 38-3f */  0xf8,    0xf9,    0x7a,    0x5e,    0x4c,    0x7e,    0x6e,    0x6f,
  /* 40-47 */  0x7c,    0xc1,    0xc2,    0xc3,    0xc4,    0xc5,    0xc6,    0xc7,
  /* 48-4f */  0xc8,    0xc9,    0xd1,    0xd2,    0xd3,    0xd4,    0xd5,    0xd6,
  /* 50-57 */  0xd7,    0xd8,    0xd9,    0xe2,    0xe3,    0xe4,    0xe5,    0xe6,
  /* 58-5f */  0xe7,    0xe8,    0xe9,    0xad,    0xe0,    0xbd,    0x5f,    0x6d,
  /* 60-67 */  0x79,    0x81,    0x82,    0x83,    0x84,    0x85,    0x86,    0x87,
  /* 68-6f */  0x88,    0x89,    0x91,    0x92,    0x93,    0x94,    0x95,    0x96,
  /* 70-77 */  0x97,    0x98,    0x99,    0xa2,    0xa3,    0xa4,    0xa5,    0xa6,
  /* 78-7f */  0xa7,    0xa8,    0xa9,    0xc0,    0x4f,    0xd0,    0xa1,    0x07,

  /* 80-87 */  0x20,    0x01,    0x02,    0x03,    0x37,    0x2d,    0x2e,    0x2f,
  /* 88-8f */  0x16,    0x05,    0x25,    0x0b,    0x0c,    0x0d,    0x0e,    0x0f,
  /* 90-97 */  0x10,    0x11,    0x12,    0x13,    0x3c,    0x3d,    0x32,    0x26,
  /* 98-9f */  0x18,    0x19,    0x3f,    0x27,    0x1c,    0x1d,    0x1e,    0x1f,
  /* a0-a7 */  0x40,    0x5a,    0x4a,    0xb1,    0x5b,    0xb2,    0x6a,    0x7d,
  /* a8-af */  0x4d,    0x5d,    0x5c,    0x4e,    0x6b,    0x60,    0x4b,    0x61,
  /* b0-b7 */  0xf0,    0xf1,    0xf2,    0xf3,    0xf4,    0xf5,    0xf6,    0xf7,
  /* b8-bf */  0xf8,    0xf9,    0x7a,    0x5e,    0x4c,    0x7e,    0x6e,    0x6f,
  /* c0-c7 */  0x7c,    0xc1,    0xc2,    0xc3,    0xc4,    0xc5,    0xc6,    0xc7,
  /* c8-cf */  0xc8,    0xc9,    0xd1,    0xd2,    0xd3,    0xd4,    0xd5,    0xd6,
  /* d0-d7 */  0xd7,    0xd8,    0xd9,    0xe2,    0xe3,    0xe4,    0xe5,    0xe6,
  /* d8-df */  0xe7,    0xe8,    0xe9,    0xad,    0xe0,    0xbd,    0x5f,    0x6d,
  /* e0-e7 */  0x79,    0x81,    0x82,    0x83,    0x84,    0x85,    0x86,    0x87,
  /* e8-ef */  0x88,    0x89,    0x91,    0x92,    0x93,    0x94,    0x95,    0x96,
  /* f0-f7 */  0x97,    0x98,    0x99,    0xa2,    0xa3,    0xa4,    0xa5,    0xa6,
  /* f8-ff */  0xa7,    0xa8,    0xa9,    0xc0,    0x4f,    0xd0,    0xa1,    0x07
  ];
  //
  // EBCDIC to ASCII character code translation table
  //
  static EbcdicToAscii = [
  /* 00-07 */  0x00,    0x01,    0x02,    0x03,    0x1a,    0x09,    0x1a,    0x7f,
  /* 08-0f */  0x1a,    0x1a,    0x1a,    0x0b,    0x0c,    0x0d,    0x0e,    0x0f,
  /* 10-17 */  0x10,    0x11,    0x12,    0x13,    0x1a,    0x1a,    0x08,    0x1a,
  /* 18-1f */  0x18,    0x19,    0x1a,    0x1a,    0x1c,    0x1d,    0x1e,    0x1f,
  /* 20-27 */  0x80,    0x1a,    0x1a,    0x1a,    0x1a,    0x0a,    0x17,    0x1b,
  /* 28-2f */  0x1a,    0x1a,    0x1a,    0x1a,    0x1a,    0x05,    0x06,    0x07,
  /* 30-37 */  0x1a,    0x1a,    0x16,    0x1a,    0x1a,    0x1a,    0x1a,    0x04,
  /* 38-3f */  0x1a,    0x1a,    0x1a,    0x1a,    0x14,    0x15,    0x1a,    0x1a,
  /* 40-47 */  0x20,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,
  /* 48-4f */  0x1a,    0x1a,    0xa2,    0x2e,    0x3c,    0x28,    0x2b,    0x7c,
  /* 50-57 */  0x26,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,
  /* 58-5f */  0x1a,    0x1a,    0x21,    0x24,    0x2a,    0x29,    0x3b,    0x5e,
  /* 60-67 */  0x2d,    0x2f,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,
  /* 68-6f */  0x1a,    0x1a,    0xa6,    0x2c,    0x25,    0x5f,    0x3e,    0x3f,
  /* 70-77 */  0x1a,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,
  /* 78-7f */  0x1a,    0x60,    0x3a,    0x23,    0x40,    0x27,    0x3d,    0x22,

  /* 80-87 */  0x1a,    0x61,    0x62,    0x63,    0x64,    0x65,    0x66,    0x67,
  /* 88-8f */  0x68,    0x69,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,
  /* 90-97 */  0x1a,    0x6a,    0x6b,    0x6c,    0x6d,    0x6e,    0x6f,    0x70,
  /* 98-9f */  0x71,    0x72,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,
  /* a0-a7 */  0x1a,    0x7e,    0x73,    0x74,    0x75,    0x76,    0x77,    0x78,
  /* a8-af */  0x79,    0x7a,    0x1a,    0x1a,    0x1a,    0x5b,    0x1a,    0x1a,
  /* b0-b7 */  0x5e,    0xa3,    0xa5,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,
  /* b8-bf */  0x1a,    0x1a,    0x5b,    0x5d,    0x1a,    0x5d,    0x1a,    0x1a,
  /* c0-c7 */  0x7b,    0x41,    0x42,    0x43,    0x44,    0x45,    0x46,    0x47,
  /* c8-cf */  0x48,    0x49,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,
  /* d0-d7 */  0x7d,    0x4a,    0x4b,    0x4c,    0x4d,    0x4e,    0x4f,    0x50,
  /* d8-df */  0x51,    0x52,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,
  /* e0-e7 */  0x5c,    0x1a,    0x53,    0x54,    0x55,    0x56,    0x57,    0x58,
  /* e8-ef */  0x59,    0x5a,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,
  /* f0-f7 */  0x30,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,    0x37,
  /* f8-fF */  0x38,    0x39,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a,    0x1a
  ];

  constructor() {
  }

  toBcd(ascii) {
    if (typeof ascii === "string") {
      let bcd = [];
      for (let i = 0; i < ascii.length; i++) {
        bcd.push(Translator.AsciiToBcd[ascii.charCodeAt(i)]);
      }
      return bcd;
    }
    else {
      return ascii.map(b => Translator.AsciiToBcd[b]);
    }
  }

  toEbcdic(ascii) {
    if (typeof ascii === "string") {
      let ebcdic = [];
      for (let i = 0; i < ascii.length; i++) {
        ebcdic.push(Translator.AsciiToEbcdic[ascii.charCodeAt(i)]);
      }
      return ebcdic;
    }
    else {
      return ascii.map(b => Translator.AsciiToEbcdic[b]);
    }
  }
}

module.exports = Translator;
